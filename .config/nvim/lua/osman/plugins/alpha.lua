return {
	"goolord/alpha-nvim",
	event = "VimEnter",
	dependencies = {
		"nvim-tree/nvim-web-devicons",
		"rubiin/fortune.nvim",
	},
	config = function()
		local alpha = require("alpha")
		local dashboard = require("alpha.themes.dashboard")

		-- Set header

		local function getRandomAscii(tbl)
			-- Create a temporary table to store keys of the main table
			local keys = {}

			-- Fill the temporary table with keys from the main table
			for key, _ in pairs(tbl) do
				table.insert(keys, key)
			end

			-- Get the length of the temporary table
			local length = #keys

			-- Check if the table is empty
			if length == 0 then
				return nil -- Return nil if the table is empty
			end

			-- Generate a random index within the range of the table length
			local randomIndex = math.random(1, length)

			-- Get a random key from the temporary table
			local randomKey = keys[randomIndex]

			-- Return the value associated with the random key
			return tbl[randomKey]
		end

		local M = {}

		M.default1 = {
			[[                               __                ]],
			[[  ___     ___    ___   __  __ /\_\    ___ ___    ]],
			[[ / _ `\  / __`\ / __`\/\ \/\ \\/\ \  / __` __`\  ]],
			[[/\ \/\ \/\  __//\ \_\ \ \ \_/ |\ \ \/\ \/\ \/\ \ ]],
			[[\ \_\ \_\ \____\ \____/\ \___/  \ \_\ \_\ \_\ \_\]],
			[[ \/_/\/_/\/____/\/___/  \/__/    \/_/\/_/\/_/\/_/]],
		}

		M.default2 = {
			[[ _______             ____   ____.__         ]],
			[[ \      \   ____  ___\   \ /   /|__| _____  ]],
			[[ /   |   \_/ __ \/  _ \   Y   / |  |/     \ ]],
			[[/    |    \  ___(  <_> )     /  |  |  Y Y  \]],
			[[\____|__  /\___  >____/ \___/   |__|__|_|  /]],
			[[        \/     \/                        \/ ]],
		}

		M.AlElm = {
			"           ▄ ▄                   ",
			"       ▄   ▄▄▄     ▄ ▄▄▄ ▄ ▄     ",
			"       █ ▄ █▄█ ▄▄▄ █ █▄█ █ █     ",
			"    ▄▄ █▄█▄▄▄█ █▄█▄█▄▄█▄▄█ █     ",
			"  ▄ █▄▄█ ▄ ▄▄ ▄█ ▄▄▄▄▄▄▄▄▄▄▄▄▄▄  ",
			"  █▄▄▄▄ ▄▄▄ █ ▄ ▄▄▄ ▄ ▄▄▄ ▄ ▄ █ ▄",
			"▄ █ █▄█ █▄█ █ █ █▄█ █ █▄█ ▄▄▄ █ █",
			"█▄█ ▄ █▄▄█▄▄█ █ ▄▄█ █ ▄ █ █▄█▄█ █",
			"    █▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄█ █▄█▄▄▄█    ",
		}

		M.dos_rebel = {
			[[                                                                       ]],
			[[  ██████   █████                   █████   █████  ███                  ]],
			[[ ░░██████ ░░███                   ░░███   ░░███  ░░░                   ]],
			[[  ░███░███ ░███   ██████   ██████  ░███    ░███  ████  █████████████   ]],
			[[  ░███░░███░███  ███░░███ ███░░███ ░███    ░███ ░░███ ░░███░░███░░███  ]],
			[[  ░███ ░░██████ ░███████ ░███ ░███ ░░███   ███   ░███  ░███ ░███ ░███  ]],
			[[  ░███  ░░█████ ░███░░░  ░███ ░███  ░░░█████░    ░███  ░███ ░███ ░███  ]],
			[[  █████  ░░█████░░██████ ░░██████     ░░███      █████ █████░███ █████ ]],
			[[ ░░░░░    ░░░░░  ░░░░░░   ░░░░░░       ░░░      ░░░░░ ░░░░░ ░░░ ░░░░░  ]],
			[[                                                                       ]],
		}

		M.isometric = {
			[[                                                                                   ]],
			[[     /\__\         /\  \         /\  \         /\__\          ___        /\__\     ]],
			[[    /::|  |       /::\  \       /::\  \       /:/  /         /\  \      /::|  |    ]],
			[[   /:|:|  |      /:/\:\  \     /:/\:\  \     /:/  /          \:\  \    /:|:|  |    ]],
			[[  /:/|:|  |__   /::\~\:\  \   /:/  \:\  \   /:/__/  ___      /::\__\  /:/|:|__|__  ]],
			[[ /:/ |:| /\__\ /:/\:\ \:\__\ /:/__/ \:\__\  |:|  | /\__\  __/:/\/__/ /:/ |::::\__\ ]],
			[[ \/__|:|/:/  / \:\~\:\ \/__/ \:\  \ /:/  /  |:|  |/:/  / /\/:/  /    \/__/~~/:/  / ]],
			[[     |:/:/  /   \:\ \:\__\    \:\  /:/  /   |:|__/:/  /  \::/__/           /:/  /  ]],
			[[     |::/  /     \:\ \/__/     \:\/:/  /     \::::/__/    \:\__\          /:/  /   ]],
			[[     /:/  /       \:\__\        \::/  /       ~~~~         \/__/         /:/  /    ]],
			[[     \/__/         \/__/         \/__/                                   \/__/     ]],
			[[                                                                                   ]],
		}

		M.ogre = {
			[[                                     ]],
			[[      __                _            ]],
			[[   /\ \ \___  ___/\   /(_)_ __ ___   ]],
			[[  /  \/ / _ \/ _ \ \ / | | '_ ` _ \  ]],
			[[ / /\  |  __| (_) \ V /| | | | | | | ]],
			[[ \_\ \/ \___|\___/ \_/ |_|_| |_| |_| ]],
			[[                                     ]],
		}

		M.slant_relief = {
			[[                                                                                                   ]],
			[[ /\\\\\_____/\\\_______________________________/\\\________/\\\___________________________         ]],
			[[ \/\\\\\\___\/\\\______________________________\/\\\_______\/\\\__________________________         ]],
			[[ _\/\\\/\\\__\/\\\______________________________\//\\\______/\\\___/\\\_____________________       ]],
			[[  _\/\\\//\\\_\/\\\_____/\\\\\\\\______/\\\\\_____\//\\\____/\\\___\///_____/\\\\\__/\\\\\__       ]],
			[[   _\/\\\\//\\\\/\\\___/\\\/////\\\___/\\\///\\\____\//\\\__/\\\_____/\\\__/\\\///\\\\\///\\\_     ]],
			[[    _\/\\\_\//\\\/\\\__/\\\\\\\\\\\___/\\\__\//\\\____\//\\\/\\\_____\/\\\_\/\\\_\//\\\__\/\\\     ]],
			[[     _\/\\\__\//\\\\\\_\//\\///////___\//\\\__/\\\______\//\\\\\______\/\\\_\/\\\__\/\\\__\/\\\_   ]],
			[[      _\/\\\___\//\\\\\__\//\\\\\\\\\\__\///\\\\\/________\//\\\_______\/\\\_\/\\\__\/\\\__\/\\\   ]],
			[[       _\///_____\/////____\//////////_____\/////___________\///________\///__\///___\///___\///__ ]],
			[[                                                                                                   ]],
		}

		M.ansi_shadow = {
			[[                                                    ]],
			[[ ███╗   ██╗███████╗ ██████╗ ██╗   ██╗██╗███╗   ███╗ ]],
			[[ ████╗  ██║██╔════╝██╔═══██╗██║   ██║██║████╗ ████║ ]],
			[[ ██╔██╗ ██║█████╗  ██║   ██║██║   ██║██║██╔████╔██║ ]],
			[[ ██║╚██╗██║██╔══╝  ██║   ██║╚██╗ ██╔╝██║██║╚██╔╝██║ ]],
			[[ ██║ ╚████║███████╗╚██████╔╝ ╚████╔╝ ██║██║ ╚═╝ ██║ ]],
			[[ ╚═╝  ╚═══╝╚══════╝ ╚═════╝   ╚═══╝  ╚═╝╚═╝     ╚═╝ ]],
			[[                                                    ]],
		}

		M.bloody = {
			[[                                                     ]],
			[[  ███▄    █ ▓█████  ▒█████   ██▒   █▓ ██▓ ███▄ ▄███▓ ]],
			[[  ██ ▀█   █ ▓█   ▀ ▒██▒  ██▒▓██░   █▒▓██▒▓██▒▀█▀ ██▒ ]],
			[[ ▓██  ▀█ ██▒▒███   ▒██░  ██▒ ▓██  █▒░▒██▒▓██    ▓██░ ]],
			[[ ▓██▒  ▐▌██▒▒▓█  ▄ ▒██   ██░  ▒██ █░░░██░▒██    ▒██  ]],
			[[ ▒██░   ▓██░░▒████▒░ ████▓▒░   ▒▀█░  ░██░▒██▒   ░██▒ ]],
			[[ ░ ▒░   ▒ ▒ ░░ ▒░ ░░ ▒░▒░▒░    ░ ▐░  ░▓  ░ ▒░   ░  ░ ]],
			[[ ░ ░░   ░ ▒░ ░ ░  ░  ░ ▒ ▒░    ░ ░░   ▒ ░░  ░      ░ ]],
			[[    ░   ░ ░    ░   ░ ░ ░ ▒       ░░   ▒ ░░      ░    ]],
			[[          ░    ░  ░    ░ ░        ░   ░         ░    ]],
			[[                                 ░                   ]],
			[[                                                     ]],
		}

		M.delta_corps_priest1 = {
			[[                                                                   ]],
			[[ ███▄▄▄▄      ▄████████  ▄██████▄   ▄█    █▄   ▄█    ▄▄▄▄███▄▄▄▄   ]],
			[[ ███▀▀▀██▄   ███    ███ ███    ███ ███    ███ ███  ▄██▀▀▀███▀▀▀██▄ ]],
			[[ ███   ███   ███    █▀  ███    ███ ███    ███ ███▌ ███   ███   ███ ]],
			[[ ███   ███  ▄███▄▄▄     ███    ███ ███    ███ ███▌ ███   ███   ███ ]],
			[[ ███   ███ ▀▀███▀▀▀     ███    ███ ███    ███ ███▌ ███   ███   ███ ]],
			[[ ███   ███   ███    █▄  ███    ███ ███    ███ ███  ███   ███   ███ ]],
			[[ ███   ███   ███    ███ ███    ███ ███    ███ ███  ███   ███   ███ ]],
			[[  ▀█   █▀    ██████████  ▀██████▀   ▀██████▀  █▀    ▀█   ███   █▀  ]],
			[[                                                                   ]],
		}

		M.elite = {
			[[                                   ]],
			[[  ▐ ▄ ▄▄▄ .       ▌ ▐·▪  • ▌ ▄ ·.  ]],
			[[ •█▌▐█▀▄.▀·▪     ▪█·█▌██ ·██ ▐███▪ ]],
			[[ ▐█▐▐▌▐▀▀▪▄ ▄█▀▄ ▐█▐█•▐█·▐█ ▌▐▌▐█· ]],
			[[ ██▐█▌▐█▄▄▌▐█▌.▐▌ ███ ▐█▌██ ██▌▐█▌ ]],
			[[ ▀▀ █▪ ▀▀▀  ▀█▄▀▪. ▀  ▀▀▀▀▀  █▪▀▀▀ ]],
			[[                                   ]],
		}

		M.the_edge = {
			[[                                       ]],
			[[    ▄   ▄███▄   ████▄     ▄   ▄█ █▀▄▀█ ]],
			[[     █  █▀   ▀  █   █      █  ██ █ █ █ ]],
			[[ ██   █ ██▄▄    █   █ █     █ ██ █ ▄ █ ]],
			[[ █ █  █ █▄   ▄▀ ▀████  █    █ ▐█ █   █ ]],
			[[ █  █ █ ▀███▀           █  █   ▐    █  ]],
			[[ █   ██                  █▐        ▀   ]],
			[[                         ▐             ]],
			[[                                       ]],
		}

		M.larry_3d = {
			[[                                                     ]],
			[[  __  __                 __  __                      ]],
			[[ /\ \/\ \               /\ \/\ \  __                 ]],
			[[ \ \ `\\ \     __    ___\ \ \ \ \/\_\    ___ ___     ]],
			[[  \ \ , ` \  /'__`\ / __`\ \ \ \ \/\ \ /' __` __`\   ]],
			[[   \ \ \`\ \/\  __//\ \L\ \ \ \_/ \ \ \/\ \/\ \/\ \  ]],
			[[    \ \_\ \_\ \____\ \____/\ `\___/\ \_\ \_\ \_\ \_\ ]],
			[[     \/_/\/_/\/____/\/___/  `\/__/  \/_/\/_/\/_/\/_/ ]],
			[[                                                     ]],
		}

		M.lean = {
			[[                                                                  ]],
			[[     _/      _/                      _/      _/  _/               ]],
			[[    _/_/    _/    _/_/      _/_/    _/      _/      _/_/_/  _/_/  ]],
			[[   _/  _/  _/  _/_/_/_/  _/    _/  _/      _/  _/  _/    _/    _/ ]],
			[[  _/    _/_/  _/        _/    _/    _/  _/    _/  _/    _/    _/  ]],
			[[ _/      _/    _/_/_/    _/_/        _/      _/  _/    _/    _/   ]],
			[[                                                                  ]],
		}

		M.sharp = {
			[[                                                                       ]],
			[[                                                                     ]],
			[[       ████ ██████           █████      ██                     ]],
			[[      ███████████             █████                             ]],
			[[      █████████ ███████████████████ ███   ███████████   ]],
			[[     █████████  ███    █████████████ █████ ██████████████   ]],
			[[    █████████ ██████████ █████████ █████ █████ ████ █████   ]],
			[[  ███████████ ███    ███ █████████ █████ █████ ████ █████  ]],
			[[ ██████  █████████████████████ ████ █████ █████ ████ ██████ ]],
			[[                                                                       ]],
		}

		local randomAscii = getRandomAscii(M)
		dashboard.section.header.val = randomAscii

		-- Set menu
		dashboard.section.buttons.val = {
			dashboard.button("e", "  New File", "<cmd>ene<CR>"),
			dashboard.button("r", "󰄉  Recent files", ":Telescope oldfiles <CR>"),
			dashboard.button("SPC ee", "  Toggle file explorer", "<cmd>Oil<CR>"),
			-- dashboard.button("SPC ff", "󰱼  Find File", "<cmd>Telescope find_files<CR>"),
			-- dashboard.button("SPC fs", "  Find Word", "<cmd>Telescope live_grep<CR>"),
			dashboard.button("SPC wr", "󰁯  Restore Session For Current Directory", "<cmd>SessionRestore<CR>"),
			dashboard.button("c", "  Configuration", ":e ~/.config/nvim/ <CR>"),
			dashboard.button("q", "  Quit NVIM", "<cmd>qa<CR>"),
		}

		-- Set Footer
		local fortune = require("fortune")

		fortune.setup({
			-- max width the fortune section should take place
			max_width = 60,

			-- Controls the amount of text displayed
			-- short - One liners (default)
			-- long - Multiple lines
			-- mixed - Combination of above
			display_format = "mixed",

			-- The type of fortune to display
			-- quotes - Random techy quotes
			-- tips - Neovim productivity tips
			-- mixed - Combination of above
			content_type = "mixed",
		})

		dashboard.section.footer.val = fortune.get_fortune()

		-- Send config to alpha
		alpha.setup(dashboard.opts)

		-- Disable folding on alpha buffer
		vim.cmd([[autocmd FileType alpha setlocal nofoldenable]])
	end,
}
